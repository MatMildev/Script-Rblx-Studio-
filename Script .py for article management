import random
import string
import time
from collections import defaultdict

class Item:
    def __init__(self, name, quantity, price):
        self.name = name
        self.quantity = quantity
        self.price = price

    def update_quantity(self, amount):
        self.quantity += amount
        if self.quantity < 0:
            self.quantity = 0

    def update_price(self, new_price):
        self.price = new_price

class Inventory:
    def __init__(self):
        self.items = {}

    def add_item(self, item):
        if item.name in self.items:
            self.items[item.name].update_quantity(item.quantity)
        else:
            self.items[item.name] = item

    def remove_item(self, item_name, quantity):
        if item_name in self.items:
            self.items[item_name].update_quantity(-quantity)
            if self.items[item_name].quantity == 0:
                del self.items[item_name]

    def list_items(self):
        if not self.items:
            print("Inventory is empty.")
            return
        for item in self.items.values():
            print(f"{item.name} - Quantity: {item.quantity}, Price: {item.price}")

    def get_item(self, item_name):
        return self.items.get(item_name)

class User:
    def __init__(self, username, balance):
        self.username = username
        self.balance = balance
        self.cart = defaultdict(int)

    def add_to_cart(self, item, quantity):
        if item.quantity >= quantity:
            self.cart[item.name] += quantity
            item.update_quantity(-quantity)
            print(f"{item.name} added to cart. Quantity: {quantity}")
        else:
            print(f"Not enough {item.name} in stock.")

    def checkout(self):
        total_cost = 0
        for item_name, quantity in self.cart.items():
            item = inventory.get_item(item_name)
            if item:
                total_cost += item.price * quantity
        if total_cost <= self.balance:
            self.balance -= total_cost
            print(f"Checkout successful. Total cost: {total_cost}. Remaining balance: {self.balance}")
            self.cart.clear()
        else:
            print("Insufficient funds for checkout.")

class Store:
    def __init__(self):
        self.inventory = Inventory()
        self.users = {}

    def create_user(self, username, balance):
        if username not in self.users:
            self.users[username] = User(username, balance)
        else:
            print(f"User {username} already exists.")

    def add_inventory_item(self, name, quantity, price):
        item = Item(name, quantity, price)
        self.inventory.add_item(item)

    def display_inventory(self):
        self.inventory.list_items()

    def get_user(self, username):
        return self.users.get(username)

    def simulate_shopping(self, username):
        user = self.get_user(username)
        if not user:
            print(f"User {username} not found.")
            return
        self.display_inventory()
        while True:
            action = input("Enter action (add/view/checkout/exit): ").strip().lower()
            if action == "add":
                item_name = input("Enter item name: ").strip()
                quantity = int(input("Enter quantity: "))
                item = self.inventory.get_item(item_name)
                if item:
                    user.add_to_cart(item, quantity)
                else:
                    print(f"Item {item_name} not found.")
            elif action == "view":
                print(f"Your cart: {user.cart}")
            elif action == "checkout":
                user.checkout()
                break
            elif action == "exit":
                break
            else:
                print("Invalid action.")

def generate_random_string(length):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))

def seed_data():
    store.add_inventory_item("Laptop", 50, 999.99)
    store.add_inventory_item("Phone", 200, 699.99)
    store.add_inventory_item("Headphones", 150, 199.99)
    store.add_inventory_item("Monitor", 30, 299.99)

store = Store()
seed_data()

store.create_user("john_doe", 5000)
store.create_user("jane_doe", 2000)

def run():
    while True:
        print("\nWelcome to the Online Store!")
        username = input("Enter your username (or type 'exit' to quit): ").strip()
        if username == "exit":
            break
        user = store.get_user(username)
        if not user:
            print(f"User {username} does not exist.")
            continue
        store.simulate_shopping(username)

if __name__ == "__main__":
    run()
